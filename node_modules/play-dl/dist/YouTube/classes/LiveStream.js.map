{"version":3,"file":"LiveStream.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/LiveStream.ts"],"names":[],"mappings":"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","sourcesContent":["import { PassThrough } from 'stream'\r\nimport got from 'got'\r\nimport { StreamType } from '../stream';\r\nimport Request from 'got/dist/source/core';\r\n\r\nexport interface FormatInterface{\r\n    url : string;\r\n    targetDurationSec : number;\r\n    maxDvrDurationSec : number\r\n}\r\n\r\nexport class LiveStreaming{\r\n    type : StreamType\r\n    stream : PassThrough\r\n    private base_url : string\r\n    private url : string\r\n    private interval : number\r\n    private packet_count : number\r\n    private timer : NodeJS.Timer | null\r\n    private segments_urls : string[]\r\n    private request : Request | null\r\n    constructor(dash_url : string, target_interval : number){\r\n        this.type = StreamType.Arbitrary\r\n        this.url = dash_url\r\n        this.base_url = ''\r\n        this.stream = new PassThrough({ highWaterMark : 10 * 1000 * 1000 })\r\n        this.segments_urls = []\r\n        this.packet_count = 0\r\n        this.request = null\r\n        this.timer = null\r\n        this.interval = target_interval * 1000 || 0\r\n        this.stream.on('close', () => {\r\n            this.cleanup()\r\n        });\r\n        this.start()\r\n    }\r\n    \r\n    private async dash_getter(){\r\n        let response = await got(this.url)\r\n        let audioFormat = response.body.split('<AdaptationSet id=\"0\"')[1].split('</AdaptationSet>')[0].split('</Representation>')\r\n        if(audioFormat[audioFormat.length - 1] === '') audioFormat.pop()\r\n        this.base_url = audioFormat[audioFormat.length - 1].split('<BaseURL>')[1].split('</BaseURL>')[0]\r\n        let list = audioFormat[audioFormat.length - 1].split('<SegmentList>')[1].split('</SegmentList>')[0]\r\n        this.segments_urls = list.replace(new RegExp('<SegmentURL media=\"', 'g'), '').split('\"/>')\r\n        if(this.segments_urls[this.segments_urls.length - 1] === '') this.segments_urls.pop()\r\n    }\r\n\r\n    private cleanup(){\r\n        clearTimeout(this.timer as NodeJS.Timer)\r\n        this.request?.destroy()\r\n        this.request = null\r\n        this.timer = null\r\n        this.url = ''\r\n        this.base_url = ''\r\n        this.segments_urls = []\r\n        this.packet_count = 0\r\n        this.interval = 0\r\n    }\r\n\r\n    private async start(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        await this.dash_getter()\r\n        if(this.packet_count === 0) this.packet_count = Number(this.segments_urls[0].split('sq/')[1].split('/')[0])\r\n        for await (let segment of this.segments_urls){\r\n            if(Number(segment.split('sq/')[1].split('/')[0]) !== this.packet_count){\r\n                continue\r\n            }\r\n            await (async () => {\r\n                return new Promise(async (resolve, reject) => {\r\n                    let stream = got.stream(this.base_url + segment)\r\n                    this.request = stream\r\n                    stream.on('data', (chunk: any) => this.stream.write(chunk))\r\n                    stream.on('end', () => {\r\n                        this.packet_count++\r\n                        resolve('')\r\n                    })\r\n                    stream.once('error', (err) => {\r\n                        this.stream.emit('error', err)\r\n                    })\r\n                })\r\n            })()\r\n        }\r\n        this.timer = setTimeout(() => {\r\n            this.start()\r\n        }, this.interval)\r\n    }\r\n}\r\n\r\nexport class LiveEnded{\r\n    type : StreamType\r\n    stream : PassThrough\r\n    private url : string;\r\n    private base_url : string;\r\n    private packet_count : number\r\n    private segments_urls : string[]\r\n    private request : Request | null\r\n    constructor(dash_url : string){\r\n        this.type = StreamType.Arbitrary\r\n        this.url = dash_url\r\n        this.base_url = ''\r\n        this.stream = new PassThrough({ highWaterMark : 10 * 1000 * 1000 })\r\n        this.segments_urls = []\r\n        this.request = null\r\n        this.packet_count = 0\r\n        this.stream.on('close', () => {\r\n            this.cleanup()\r\n        })\r\n        this.start()\r\n    }\r\n\r\n    private async dash_getter(){\r\n        let response = await got(this.url)\r\n        let audioFormat = response.body.split('<AdaptationSet id=\"0\"')[1].split('</AdaptationSet>')[0].split('</Representation>')\r\n        if(audioFormat[audioFormat.length - 1] === '') audioFormat.pop()\r\n        this.base_url = audioFormat[audioFormat.length - 1].split('<BaseURL>')[1].split('</BaseURL>')[0]\r\n        let list = audioFormat[audioFormat.length - 1].split('<SegmentList>')[1].split('</SegmentList>')[0]\r\n        this.segments_urls = list.replace(new RegExp('<SegmentURL media=\"', 'g'), '').split('\"/>')\r\n        if(this.segments_urls[this.segments_urls.length - 1] === '') this.segments_urls.pop()\r\n    }\r\n\r\n    private cleanup(){\r\n        this.request?.destroy()\r\n        this.request = null\r\n        this.url = ''\r\n        this.base_url = ''\r\n        this.segments_urls = []\r\n        this.packet_count = 0\r\n    }\r\n\r\n    private async start(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        await this.dash_getter()\r\n        if(this.packet_count === 0) this.packet_count = Number(this.segments_urls[0].split('sq/')[1].split('/')[0])\r\n        for await (let segment of this.segments_urls){\r\n            if(this.stream.destroyed){\r\n                this.cleanup()\r\n                break\r\n            }\r\n            if(Number(segment.split('sq/')[1].split('/')[0]) !== this.packet_count){\r\n                continue\r\n            }\r\n            await (async () => {\r\n                return new Promise(async (resolve, reject) => {\r\n                    let stream = got.stream(this.base_url + segment)\r\n                    this.request = stream\r\n                    stream.on('data', (chunk: any) => this.stream.write(chunk))\r\n                    stream.on('end', () => {\r\n                        this.packet_count++\r\n                        resolve('')\r\n                    })\r\n                    stream.once('error', (err) => {\r\n                        this.stream.emit('error', err)\r\n                    })\r\n                })\r\n            })()\r\n        }\r\n    }\r\n}\r\n\r\nexport class Stream {\r\n    type : StreamType\r\n    stream : PassThrough\r\n    private url : string\r\n    private bytes_count : number;\r\n    private per_sec_bytes : number;\r\n    private duration : number;\r\n    private timer : NodeJS.Timer | null\r\n    private request : Request | null\r\n    constructor(url : string, type : StreamType, duration : number){\r\n        this.url = url\r\n        this.type = type\r\n        this.stream = new PassThrough({ highWaterMark : 10 * 1000 * 1000 })\r\n        this.bytes_count = 0\r\n        this.per_sec_bytes = 0\r\n        this.timer = null\r\n        this.request = null\r\n        this.stream.on('close', () => {\r\n            this.cleanup()\r\n        })\r\n        this.duration = duration;\r\n        (duration > 300) ? this.loop_start() : this.normal_start()\r\n    }\r\n\r\n    private cleanup(){\r\n        clearTimeout(this.timer as NodeJS.Timer)\r\n        this.request?.destroy()\r\n        this.request = null\r\n        this.timer = null\r\n        this.url = ''\r\n        this.bytes_count = 0\r\n        this.per_sec_bytes = 0\r\n    }\r\n\r\n    private normal_start(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        let stream = got.stream(this.url)\r\n        this.request = stream\r\n\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err)\r\n        })\r\n        \r\n        stream.pipe(this.stream)\r\n    }\r\n\r\n    private loop_start(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        let stream = got.stream(this.url)\r\n        this.request = stream\r\n        stream.once('data', () => {\r\n            this.per_sec_bytes = Math.ceil((stream.downloadProgress.total as number)/this.duration)\r\n        })\r\n\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err)\r\n        })\r\n\r\n        stream.on('data', (chunk: any) => {\r\n            this.bytes_count += chunk.length\r\n            this.stream.write(chunk)\r\n        })\r\n        stream.on('data', () => {\r\n            if(this.bytes_count > (this.per_sec_bytes * 300)){\r\n                stream.destroy()\r\n            }\r\n        })\r\n\r\n        this.timer = setTimeout(() => {\r\n            this.loop()\r\n        }, 280 * 1000)\r\n    }\r\n\r\n    private loop(){\r\n        if(this.stream.destroyed){\r\n            this.cleanup()\r\n            return\r\n        }\r\n        let absolute_bytes : number = 0\r\n        let stream = got.stream(this.url, {\r\n            headers : {\r\n                \"range\" : `bytes=${this.bytes_count}-`\r\n            }\r\n        })\r\n        this.request = stream\r\n        stream.on('data', (chunk: any) => {\r\n            absolute_bytes += chunk.length\r\n            this.bytes_count += chunk.length\r\n            this.stream.write(chunk)\r\n        })\r\n\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err)\r\n        })\r\n\r\n        stream.on('data', () => {\r\n            if(absolute_bytes > (this.per_sec_bytes * 300)){\r\n                stream.destroy()\r\n            }\r\n        })\r\n\r\n        stream.on('end', () => {\r\n            this.cleanup()\r\n        })\r\n\r\n        this.timer = setTimeout(() => {\r\n            this.loop()\r\n        }, 280 * 1000)\r\n    }\r\n}\r\n"]}